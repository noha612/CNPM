/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Control.MonHocDAO;
import Model.LopHocPhan;
import Model.MonHoc;
import Model.SinhVien;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.event.ActionListener;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
/**
 *
 * @author ntnhu
 */
public class TimMonFrm extends javax.swing.JFrame implements ActionListener{
    private SinhVien SV;
    private ArrayList<MonHoc> ListMH;
    private ArrayList<JButton> ListLC;
    private ArrayList<LopHocPhan> ListDK;
    /**
     * Creates new form TimMonFrm
     */
    public TimMonFrm(SinhVien SV, ArrayList<LopHocPhan> ListDK) {
        this.SV = SV;
        this.ListDK = ListDK;
        ListMH=new ArrayList<>();
        ListLC=new ArrayList<>();
        initComponents();
        btnQuayLai.addActionListener(this);
        btnTimKiem.addActionListener(this);
        tblResult.setModel(new MonHocTableModel());
        TableCellRenderer btnRenderer = new JTableButtonRenderer();
        tblResult.getColumn("Lựa chọn").setCellRenderer(btnRenderer);
        tblResult.addMouseListener(new JTableButtonMouseListener(tblResult));    
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtTenMon = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResult = new javax.swing.JTable();
        btnQuayLai = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 102));
        jLabel1.setText("Tìm Kiếm Môn Học");

        jLabel2.setText("Nhập tên môn học cần tìm kiếm : ");

        btnTimKiem.setText("Tìm Kiếm");

        tblResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã môn học", "Tên môn học", "STC"
            }
        ));
        jScrollPane1.setViewportView(tblResult);

        btnQuayLai.setText("Quay Lại");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnQuayLai)
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTenMon, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTimKiem))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(jLabel1)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTenMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimKiem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(btnQuayLai)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void btnTimKiemClicked(){
        MonHocDAO mhDAO=new MonHocDAO();
        ListMH=mhDAO.TimMonTheoTen(txtTenMon.getText());
        if(ListMH.size()==0)JOptionPane.showMessageDialog(this, "Không tìm thấy môn học nào!");
        else fillTable(ListMH);
    }
    private void btnQuayLaiClicked(){    
        new DangKyTinChiFrm(SV, ListDK).setVisible(true);
        this.dispose();
    }
    /**
     * @param args the command line arguments
     */
    private void fillTable(ArrayList<MonHoc> ListMH){  
        tblResult.setRowHeight(20);
        TableColumn col = tblResult.getColumnModel().getColumn(0);
        col.setPreferredWidth(5);  
        col = tblResult.getColumnModel().getColumn(1);
        col.setPreferredWidth(15);     
        col = tblResult.getColumnModel().getColumn(2);
        col.setPreferredWidth(150);  
        col = tblResult.getColumnModel().getColumn(3);
        col.setPreferredWidth(10);   
        col = tblResult.getColumnModel().getColumn(4);
        col.setPreferredWidth(10);      
        for(MonHoc i:ListMH){
            JButton btn=new JButton("Chọn");
            btn.addActionListener(this);
            ListLC.add(btn);
        }
        for(int i = 0; i < 4; i++){
            TableColumnModel columnModel = tblResult.getColumnModel();
            TableColumn column = columnModel.getColumn(i); 
            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(JLabel.CENTER);
            column.setCellRenderer(renderer);
        }
        ((DefaultTableModel)tblResult.getModel()).fireTableDataChanged();
    }
    private int CheckMonHoc(int id){
        int ex=0;
        for(LopHocPhan i:ListDK){
            if(i.getMonHocId()==id)return ex;
            ex++;
        }
        return -1;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnQuayLai;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblResult;
    private javax.swing.JTextField txtTenMon;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton btnClicked =(JButton)e.getSource();
        if(btnClicked.equals(btnQuayLai)){
            btnQuayLaiClicked();
        }
        if(btnClicked.equals(btnTimKiem)){
            btnTimKiemClicked();
        }
        for(int i =0;i<ListMH.size();i++){
            if(btnClicked.equals(ListLC.get(i))){
                if(CheckMonHoc(ListMH.get(i).getMonHocId())>=0){
                    if(JOptionPane.showConfirmDialog(this, "Đã lựa chọn môn này rồi! Bạn có đồng ý xóa lựa chọn cũ?", "", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION){
                        ListDK.remove(CheckMonHoc(ListMH.get(i).getMonHocId()));
                        JOptionPane.showMessageDialog(this, "Xóa thành công");
                        new TimLopFrm(ListMH.get(i), SV, ListDK).setVisible(true);
                        this.dispose();                
                    }
                }
                else{
                    new TimLopFrm(ListMH.get(i), SV, ListDK).setVisible(true);
                    this.dispose();
                }                
            }
        }
    }
    class MonHocTableModel extends DefaultTableModel{
        private String[] columnNames = {"STT", "Mã môn học", "Tên môn học", "STC","Lựa chọn"};
        private final Class<?>[] columnTypes = new Class<?>[] {Integer.class, String.class,String.class, Integer.class, JButton.class};
        @Override public int getColumnCount() {
            return 5;
        }
 
        @Override public int getRowCount() {
            return ListMH.size();
        }
 
        @Override public String getColumnName(int columnIndex) {
            return columnNames[columnIndex];
        }
 
        @Override public Class<?> getColumnClass(int columnIndex) {
            return columnTypes[columnIndex];
        }
        
        @Override public Object getValueAt(final int rowIndex, final int columnIndex) {
            switch (columnIndex) {
                case 0: 
                    return rowIndex+1;
                case 1: 
                    return ListMH.get(rowIndex).getMaMon();
                case 2: 
                    return ListMH.get(rowIndex).getTenMon();
                case 3:
                    return ListMH.get(rowIndex).getSoTinChi();
                case 4: 
                    return ListLC.get(rowIndex);
                default: return "Error";
            }
        } 
    }
    
}
